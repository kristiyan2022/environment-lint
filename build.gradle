plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

group = 'io.github.kristiyan2022'
version = '0.1.0'
sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

task sourceJar(type: Jar) {
    archiveClassifier = "sources"
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}

dependencies {
    compileOnly 'org.springframework:spring-beans:5.3.33'
    compileOnly 'org.reflections:reflections:0.10.2'
    implementation 'org.yaml:snakeyaml:2.2'
}

publishing {
    publications {
        envlint(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact javadocJar
            pom {
                name = 'envlint'
                licenses {
                    license {
                        name = 'Apache License 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'kristiyan2022'
                        name = 'Kristiyan Tenev'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com:kristiyan2022/envlint.git'
                    developerConnection = 'scm:git:ssh://github.com:kristiyan2022/envlint.git'
                    url = 'https://github.com/kristiyan2022/envlint'
                }
            }
        }
    }
    repositories {
        maven {
            name = 'OSSRH'
            url = System.getenv('MAVEN_PUBLISH_URL')
            credentials {
                username = System.getenv('MAVEN_USERNAME')
                password = System.getenv('MAVEN_PASSWORD')
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
        maven {
            name = 'GitHubPackages'
            url = uri('https://maven.pkg.github.com/kristiyan2022/envlint')
            credentials {
                username = System.getenv('GH_ACTOR')
                password = System.getenv('GH_TOKEN')
            }
        }
    }
}

signing {
    def signingKey = System.getenv('OSSRH_GPG_SECRET_KEY')
    def signingPassword = System.getenv('OSSRH_GPG_SECRET_KEY_PASSWORD')
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.envlint
}
